
DEFINITION MODULE Expresion;
(*******************************************************************************
Modulo de definicion del TAD Expresion.

Una Expresion es un arbol binario cuyos nodos son operadores aritmeticos 
(vinculando sub-expresiones) y sus hojas valores enteros o variables.

Los elementos de tipo Expresion representan las expresiones aritmeticas usuales 
bien formadas. Estas pueden ser: 
- valor entero
- nombre de variable
- expresion operador expresion
- ( expresion )

Laboratorio de Programacion 2.
InCo-FIng-UDELAR
*******************************************************************************)

FROM Token IMPORT TOper;
FROM ColaToken IMPORT ColaToken;
FROM ExpresionSimple IMPORT ExpresionSimple, TValorVariable;
TYPE
      Expresion; (* opaco *)

(************ Constructoras *************)

PROCEDURE CrearExpresionVacia (): Expresion;
(* Devuelve una Expresion vacia. *)

PROCEDURE CrearExpresionSimple (e: ExpresionSimple): Expresion;
(* Devuelve una expresion simple que contiene 'e'. *)
   
PROCEDURE CrearExpresionOper (op: TOper;
                              izq, der: Expresion): Expresion;
(* Devuelve una nueva Expresion que vincula las subexpresiones 'izq' y 
   'der' mediante el operador 'op'. *)
   
PROCEDURE ColaTokenAExpresion (VAR c : ColaToken) : Expresion;
(* Precondicion: NOT EsVaciaColaToken(c).
   Precondicion: 'c' corresponde a una expresion aritmetica bien formada. 
   Los tokens de 'c' estan ordenados de acuerdo a la notacion infija
   de la expresion.
   Devuelve la Expresion que representa la cola de tokens en 'c'.
   Al terminar se debe cumplir EsVaciaColaToken (c).	
   Se debe respetar los parentesis y el 
   orden de precedencia usual de los operadores.
*)

PROCEDURE InfijaAPosfija (VAR c : ColaToken) : ColaToken;
(* Precondicion: 'c' corresponde a una expresion aritmetica bien formada. 
   Los tokens de 'c' estan ordenados de acuerdo a la notacion infija.
   Devuelve una cola de tokens con los mismos elementos que 'c', pero
   cambia el orden del dado por la notacion infija al dado por la notacion 
   posfija. La cola devuelta no comparte memoria con 'c'.
   Por ejemplo si 'c' es: 1 -> OP_MAS -> 2
   devuelve 1 -> 2 -> OP_MAS. 
   Al terminar se debe cumplir EsVaciaColaToken (c).	
   
   Esta operacion es auxiliar a ColaTokenAExpresion.
   Se debe respetar los parentesis y el 
   orden de precedencia usual de los operadores.
 *)
   
PROCEDURE CopiarExpresion (e : Expresion) : Expresion;
(* Devuelve una copia de la Expresion 'e' sin compartir memoria. *)

(************ Predicados *************)

PROCEDURE EsVaciaExpresion (e: Expresion): BOOLEAN;
(* Devuelve TRUE unicamente si la Expresion 'e' es vacia y FALSE en caso
   contrario. *)

PROCEDURE EsExpresionSimple (e: Expresion): BOOLEAN;
(* Precondicion: NOT EsVaciaExpresion (e).
   Devuelve TRUE si la Expresion 'e' esta formada por una ExpresionSimple y 
   FALSE en otro caso. *)

PROCEDURE EsOperExpresion (e: Expresion): BOOLEAN;
(* Precondicion: NOT EsVaciaExpresion (e).
   Devuelve TRUE si la expresion 'e' esta formada por un operador que
   a dos subexpresiones y FALSE en otro caso. *)



(************ Selectoras ****************)

PROCEDURE ObtenerOperExpresion (e: Expresion): TOper;
(* Precondicion: NOT EsVaciaExpresion(e) AND EsOperExpresion(e).
   Devuelve el operador de la expresion 'e'. *)

PROCEDURE ObtenerExpresionSimple (e: Expresion): ExpresionSimple;
(* Precondicion: NOT EsVaciaExpresion(e) AND EsExpresionSimple(e).
   Devuelve la ExpresionSimple de la Expresion 'e'. *)

PROCEDURE ObtenerIzqExpresion (e : Expresion): Expresion;
(* Precondicion: NOT EsVaciaExpresion(e) AND EsOperExpresion(e).
   Devuelve la subexpresion izquierda de la Expresion 'e'. *)

PROCEDURE ObtenerDerExpresion (e : Expresion): Expresion;
(* Precondicion: NOT EsVaciaExpresion(e) AND EsOperExpresion(e).
   Devuelve la subexpresion derecha de la Expresion 'e'. *)


(************ Operaciones *************)

PROCEDURE EvaluacionParcial (val : TValorVariable; 
                             e : Expresion) : Expresion;
(* Crea y devuelve una Expresion que resulta de evaluar parcialmente la 
   Expresion 'e' con el valor 'val.valor' para la variable 'val.variable'. 
   La Expresion devuelta no comparte memoria con 'e'.

   Esta operacion reduce la Expresion todo lo que se pueda.
   - Para cada expresion simple, la misma se reduce usando 'val'
     para intentar llegar a un valor.
   - Para cada operador se procede a evaluar las subexpresiones y se
     reduce realizando la operacion correspondiente si es posible;
     esto es: si las subexpresiones reducen a expresiones simples de tipo valor.
     Las operaciones a aplicar son:
     - OP_MAS   : suma
     - OP_MENOS : resta
     - OP_POR   : multiplicacion
     - OP_DIV   : division entera
 
   Por ejemplo, si tenemos:
   val.variable = costo y val.valor = 250

   Si 'e' es: ( 10 - costo / 100 ) + saltos
   La Expresion devuelta seria: 8 + saltos.

*)

(************ Destructoras *************)

PROCEDURE DestruirExpresion (VAR e: Expresion);
(* Libera la memoria reservada por la Expresion 'e' y todos sus elementos. *)
            
END Expresion.
